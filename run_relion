#!/bin/bash

# you may need to use sudo if you user is not in the 'docker' group
sudo=""
#sudo="sudo"

# docker executable
docker_cmd="nvidia-docker"

# usage: run_relion <projectname/dir>

# ensure the project directory exists
proj=$(realpath $1)
mkdir $proj 2> /dev/null

# conatiner to run
relion_ver="2.1"
relion_container_img="fredhutch/ls2-relion:$relion_ver"

function create_container() {
  # add the user to a container
  $sudo $docker_cmd run \
    --user root \
    --name relion-$USER \
    $relion_container_img \
    adduser --quiet --disabled-password --uid $UID --gecos "" $USER
  # commit the container to a new image to be run later
  $sudo $docker_cmd commit relion-$USER $USER/relion-$relion_ver
  # delete the container (user will run the new image in the future)
  $sudo $docker_cmd rm relion-$USER
}

function start_container() {
  $sudo $docker_cmd run -ti --rm \
    --net=host \
    -e DISPLAY=$DISPLAY \
    -e LD_LIBRARY_PATH=/usr/local/lib \
    -v /home/$USER:/home/$USER \
    -v $1:$1 \
    -v /usr/local/share/relion21_tutorial:/usr/local/share/relion21_tutorial \
    --user $USER \
    --name relion-$USER \
    $USER/relion-$relion_ver \
    /bin/bash -c "cd $1 && relion"
}

# check for a container image for this user
nvidia-docker images | grep -q $USER/relion-$relion_ver
if [ "$?" -ne "0" ]
then
  create_container
fi

start_container $proj
